"we don't want to be compatible with vi.
set nocompatible

" Determine the type of a file based on its name and its contents.
filetype indent plugin on

" Enable syntax highlighting
syntax on
" I'm usually on a light background
colorscheme zellner
set bg=light

" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden

set backupdir=~/.vim/backup
" Prevent backups from overwriting each other. The naming is weird,
" since I'm using the 'backupext' variable to append the path.
" So the file '/home/docwhat/.vimrc' becomes '.vimrc%home%docwhat~'
au BufWritePre * let &backupext = substitute(expand('%:p:h'), '/', '%', 'g') . '~'

" for swap file
set directory+=~/.vim/swap// " double / so that the complete path gets used
set directory+=.


" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch
" But remove the highlighting when i type ctrl-l
:nnoremap <silent> <C-l> :nohl<CR><C-l>

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

if has('mouse')
	" Enable use of the mouse for all modes
	"set mouse=a
endif

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Tabbing Options {{{
"
" Taken from joe @ sw
set smarttab
set smartindent
set showmatch		" Show matching brackets.

set incsearch		" Incremental search

set autowrite		" Automatically save before commands like :next and :make

set noerrorbells
set novisualbell

set showtabline=2
set tabpagemax=1000

if exists("+undofile")
	set undodir=~/.vim/undodir
	set undofile
	set undoreload=10000	"maximum number lines to save for undo on a buffer reload
endif
set undolevels=1000		"maximum number of changes that can be undone
" }}}
" Indentation options {{{
"

" Use F12 to toggle between 'paste' and 'nopaste'
set pastetoggle=<F12>

" Indentation settings for using hard tabs for indent. Display tabs as
" N characters wide.
set shiftwidth=8
set tabstop=8

" }}}
" Mappings {{{
"

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Automatically cd into the directory that the file is in
set autochdir

let mapleader = ","

"Little trick to find ending whitespace in docs
"set list listchars=tab:>>,trail:*,eol:$
"hi nontext ctermfg=red

"Taken from joe @ sw
nmap <C-i> <Esc>:tabp<CR>
nmap <C-o> <Esc>:tabn<CR>
nmap <C-n> <Esc>:tabe<CR>
nmap <silent> <C-j> <Esc>:exe "silent! tabm " . (tabpagenr() - 2)<CR>
nmap <silent> <C-k> <Esc>:exe "silent! tabm " . tabpagenr()<CR>
nmap <silent> <C-f> <Esc>:exe "FufFile"<CR>
nmap <C-Right> <C-W>>
nmap <C-Left> <C-W><
nmap <C-Up> <C-W>-
nmap <C-Down> <C-W>+
nmap <silent> <F9> <Esc>:call ToggleLineTooLong()<CR>

"}}}

"{{{ Auto Commands

	" Remove any trailing whitespace that is in the file
"	autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
"	call histdel("search", -1)
"
"}}}

if &term == "xterm" || &term == "xterm-color"
	set grepprg=grep\ -nH\ $*
	
endif

" Cool tab completion stuff
set wildmode=list:longest,full

" highlight trailing whitespace and tabs after spaces in leading whitespace
"highlight ExtraWhitespace ctermbg=red guibg=red
"autocmd BufWinEnter *.c match ExtraWhitespace /^\s*     \|\s\+$/
"autocmd InsertEnter *.c match ExtraWhitespace /^\s*     \|\s\+\%#\@<!$/
"autocmd InsertLeave *.c match ExtraWhitespace /^\s*     \|\s\+$/
"autocmd BufWinLeave *.c call clearmatches()
"
if has("autocmd")
    filetype indent on
    filetype plugin on
endif


set foldenable
set foldmethod=marker

au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" function that highlights lines longer than 80 characters
let g:hl_visible = 1
function! ToggleLineTooLong()
    if g:hl_visible == 1
        match
        let g:hl_visible = 0
    else
        hi LineTooLong cterm=bold ctermbg=red guibg=LightYellow
        exe 'match LineTooLong /\%>' . &textwidth . 'v.\+/'
        let g:hl_visible = 1
    endif
endfunction

" {{{ Includes 
source ~/.conf/vim/language.vim
source ~/.conf/vim/statusline.vim
if has("macunix")
	source ~/.conf/vim/mac-host.vim
endif
" }}}
